@page "/customers"
@inject HttpClient http
@inject IJSRuntime jsRuntime
@inject NavigationManager manager
<h2>Customer List</h2>
<div class="form-group">
    <a class="btn btn-success" href="customers/create">Create New Customer</a>
</div>

@if(customers==null)
{
    <div class="text-center">
        <div class="spinner-border" role="status">
            <span class="sr-only text-uppercase">Loading!!!!!</span>
        </div>
    </div>
}
else if (customers.Count == 0)
{
    <text>There is no record to show </text>
}

else
{
    <table class="table table-bordered table-hover">
        <thead>
            <tr>
                <th>Id</th>
                <th>Image</th>
                <th>CustomerName</th>
                <th> Date</th>
                <th>IsPaid</th>
                <th>Details</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @if (customers != null)
            {
                foreach (var customer in customers)
                {
                    <tr>
                        <td>@customer.Id</td>
                        <td><img height="50" width="50" src="@customer.ImageUrl"></td>
                        <td>@customer.CustomerName.ToUpper()</td>
                        <td>@customer.DateOfBirth.ToShortDateString()</td>
                        <td>@customer.IsPaid</td>
                        <td>
                            <div>
                                @foreach(var L in customer.Products)
                                {
                                    <ul>
                                        <li>
                                            @L.ProductName,@L.ProductPrice,@L.ProductQty
                                        </li>
                                    </ul>
                                }
                            </div>
                        </td>
                        <td>
                            <a class="btn btn-primary" href="customers/edit/@customer.Id">Edit</a>|
                            <button class="btn btn-sm btn-info"
                                    @onclick="()=>ShowStudentInfo(customer.Id)">
                                Info
                            </button>|
                            <button class="btn  btn-danger"
                                    @onclick="async () => await Delete(customer)">
                                Delete
                            </button>
                        </td>
                    </tr>
                }
            }

        </tbody>
    </table>
}

@code {

    List<Customer> customers { get; set; }

    protected async override Task OnInitializedAsync()
    {
        customers = await http.GetFromJsonAsync<List<Customer>>("api/Customer");
    }
    private void ShowStudentInfo(int customerId)
    {
        manager.NavigateTo($"customers/info/{customerId}");
    }

    private async Task Delete(Customer customer)
    {
        bool confirmed = await jsRuntime.InvokeAsync<bool>("confirm", "Are you sure?");
        if(confirmed)
        {
            var response = await http.DeleteAsync($"api/Customer/{customer.Id}");
            if (response.IsSuccessStatusCode)
            {
                customers.Remove(customer);
            }
            else
            {

            }
        }
      
    }
}
